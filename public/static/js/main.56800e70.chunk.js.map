{"version":3,"sources":["components/Loader.js","assets/BGMobile.svg","assets/home.svg","assets/launches.svg","assets/missions.svg","assets/rockets.svg","assets/ships.svg","components/Title.js","router/Routes.js","router/Router.js","components/MeniItem.js","components/AppBar.js","App.js","serviceWorker.js","index.js"],"names":["Loader","className","module","exports","Title","title","Launches","lazy","Missions","Rockets","routes","path","component","Router","fallback","map","item","Component","exact","key","render","props","MeniItem","icon","text","to","activeStyle","borderBottom","alt","src","meniItems","homeIcon","launchesIcon","missionsIcon","rocketsIcon","shipsIcon","AppBar","logo","id","client","ApolloClient","uri","cache","InMemoryCache","history","createBrowserHistory","App","Math","random","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iGAAA,oBAMeA,IAJA,kBACZ,yBAAKC,UAAU,a,mBCHlBC,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,iNCS5BC,EAPD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACX,yBAAKJ,UAAU,SACZ,8BAAOI,GACP,gCCFAC,EAAWC,gBAAK,kBAAM,iCACtBC,EAAWD,gBAAK,kBAAM,iCACtBE,EAAUF,gBAAK,kBAAM,iCAgCZG,EA5BA,CACZ,CACGL,MAAO,YACPM,KAAM,IACNC,UAPYL,gBAAK,kBAAM,kCAS1B,CACGF,MAAO,WACPM,KAAM,YACNC,UAAWN,GAEd,CACGD,MAAO,WACPM,KAAM,YACNC,UAAWJ,GAEd,CACGH,MAAO,UACPM,KAAM,WACNC,UAAWH,GAEd,CACGJ,MAAO,QACPM,KAAM,SACNC,UA1BQL,gBAAK,kBAAM,mCCwBVM,EArBA,kBACZ,kBAAC,WAAD,CAAUC,SAAU,kBAACd,EAAA,EAAD,OAChBU,EAAOK,KAAI,SAAAC,GAAS,IACVL,EAAsCK,EAAtCL,KAAMN,EAAgCW,EAAhCX,MAAkBY,EAAcD,EAAzBJ,UACrB,OACG,kBAAC,IAAD,CACGM,OAAK,EACLC,IAAKH,EAAKX,MACVM,KAAMA,EACNS,OAAQ,SAAAC,GAAK,OACV,0BAAMpB,UAAU,aACb,kBAAC,EAAD,CAAOI,MAAOA,IACd,kBAACY,EAAcI,Y,sGCJrBC,EAdE,SAAC,GAAD,QAAGN,KAAQL,EAAX,EAAWA,KAAMY,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,KAAvB,OACd,kBAAC,IAAD,CACGC,GAAId,EACJO,OAAK,EACLjB,UAAU,cACVyB,YAAa,CAAEC,aAAc,mBAE7B,yBAAK1B,UAAU,cACZ,yBAAK2B,IAAI,OAAOC,IAAKN,IACrB,6BAAMC,MCATM,EAAY,CACf,CACGnB,KAAM,IACNY,KAAMQ,IACNP,KAAM,QAET,CACGb,KAAM,YACNY,KAAMS,IACNR,KAAM,YAET,CACGb,KAAM,YACNY,KAAMU,IACNT,KAAM,YAET,CACGb,KAAM,WACNY,KAAMW,IACNV,KAAM,WAET,CACGb,KAAM,SACNY,KAAMY,IACNX,KAAM,UAoBGY,EAhBA,kBACZ,yBAAKnC,UAAU,UACZ,yBAAK4B,IAAKQ,IAAMC,GAAG,SACnB,yBAAKrC,UAAU,QACZ,yBAAKA,UAAU,aAAf,UACU,yCADV,WAGA,yBAAKA,UAAU,aACX6B,EAAUf,KAAI,SAAAC,GAAI,OAChB,kBAAC,EAAD,CAAUA,KAAMA,EAAMG,IAAKH,EAAKQ,cCtCzCe,EAAS,IAAIC,eAAa,CAC9BC,IAAK,WACLC,MAAO,IAAIC,kBAGPC,EAAUC,cAaDC,MAXf,WACE,OACE,kBAAC,iBAAD,CAAgBP,OAAQA,GACtB,kBAAC,IAAD,CAAQK,QAASA,EAASzB,IAAK4B,KAAKC,UAClC,kBAAC,EAAD,MACA,kBAAC,EAAD,SCZYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASlC,OACP,kBAAC,IAAMmC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.56800e70.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Loader = () => (\n   <div className=\"loader\" />\n);\n\nexport default Loader;","module.exports = __webpack_public_path__ + \"static/media/BGMobile.ac2c4ed3.svg\";","module.exports = __webpack_public_path__ + \"static/media/home.c68750c1.svg\";","module.exports = __webpack_public_path__ + \"static/media/launches.f1d59c48.svg\";","module.exports = __webpack_public_path__ + \"static/media/missions.290061bd.svg\";","module.exports = __webpack_public_path__ + \"static/media/rockets.83fb2969.svg\";","module.exports = __webpack_public_path__ + \"static/media/ships.a4750d47.svg\";","import React from \"react\";\n\nconst Title = ({ title }) => (\n   <div className=\"title\">\n      <span>{title}</span>\n      <div />\n   </div>\n)\n\nexport default Title;","import { lazy } from \"react\";\n\n// Components\nconst Launches = lazy(() => import(\"../views/Launches\"));\nconst Missions = lazy(() => import(\"../views/Missions\"));\nconst Rockets = lazy(() => import(\"../views/Rockets\"));\nconst Dashboard = lazy(() => import(\"../views/Dashboard\"));\nconst Ships = lazy(() => import(\"../views/Ships\"));\n\nconst routes = [\n   {\n      title: \"Dashboard\",\n      path: \"/\",\n      component: Dashboard,\n   },\n   {\n      title: \"Launches\",\n      path: \"/launches\",\n      component: Launches,\n   },\n   {\n      title: \"Missions\",\n      path: \"/missions\",\n      component: Missions,\n   },\n   {\n      title: \"Rockets\",\n      path: \"/rockets\",\n      component: Rockets,\n   },\n   {\n      title: \"Ships\",\n      path: \"/ships\",\n      component: Ships,\n   }\n];\n\nexport default routes;\n","import React, { Suspense } from \"react\";\nimport { Route } from \"react-router-dom\";\n\n// Components\nimport Loader from \"../components/Loader\";\nimport Title from \"../components/Title\";\n\n// Routes\nimport routes from \"./Routes\";\n\nconst Router = () => (\n   <Suspense fallback={<Loader />}>\n      {routes.map(item => {\n         const { path, title, component: Component } = item;\n         return (\n            <Route\n               exact\n               key={item.title}\n               path={path}\n               render={props => (\n                  <main className=\"container\">\n                     <Title title={title} />\n                     <Component {...props} />\n                  </main>\n               )}\n            />\n         )\n      })}\n   </Suspense>\n)\n\nexport default Router;","import React from \"react\";\n\nimport { NavLink } from \"react-router-dom\";\n\nconst MeniItem = ({ item: { path, icon, text } }) => (\n   <NavLink\n      to={path}\n      exact\n      className=\"meniNavLink\"\n      activeStyle={{ borderBottom: \"2px solid #000\" }}\n   >\n      <div className=\"appBarItem\">\n         <img alt=\"Icon\" src={icon} />\n         <div>{text}</div>\n      </div>\n   </NavLink>\n);\n\nexport default MeniItem;","import React from \"react\";\n\n// Images\nimport logo from \"../assets/BGMobile.svg\"\nimport homeIcon from \"../assets/home.svg\";\nimport launchesIcon from \"../assets/launches.svg\";\nimport missionsIcon from \"../assets/missions.svg\";\nimport rocketsIcon from \"../assets/rockets.svg\";\nimport shipsIcon from \"../assets/ships.svg\";\n\n// Components\nimport MeniItem from \"./MeniItem\";\n\nconst meniItems = [\n   {\n      path: \"/\",\n      icon: homeIcon,\n      text: \"Home\"\n   },\n   {\n      path: \"/launches\",\n      icon: launchesIcon,\n      text: \"Launches\"\n   },\n   {\n      path: \"/missions\",\n      icon: missionsIcon,\n      text: \"Missions\"\n   },\n   {\n      path: \"/rockets\",\n      icon: rocketsIcon,\n      text: \"Rockets\"\n   },\n   {\n      path: \"/ships\",\n      icon: shipsIcon,\n      text: \"Ships\"\n   }\n];\n\nconst AppBar = () => (\n   <div className=\"header\">\n      <img src={logo} id=\"logo\" />\n      <div className=\"meni\">\n         <div className=\"meniTitle\">\n            SpaceX <span>Control</span> Center\n         </div>\n         <div className=\"meniItems\">\n            {meniItems.map(item => (\n               <MeniItem item={item} key={item.text} />\n            ))}\n         </div>\n      </div>\n   </div>\n)\n\nexport default AppBar;","import React from 'react';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\n\n// CSS\nimport \"./App.css\";\n\n// Components\nimport MainRouter from \"./router/Router\";\nimport AppBar from \"./components/AppBar\";\n\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n  cache: new InMemoryCache()\n})\n\nconst history = createBrowserHistory();\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router history={history} key={Math.random()}>\n        <AppBar />\n        <MainRouter />\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}